/**
 * The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.
 */
export interface User {
    /**
     * Name of the [User](#schema_user)
     */
    name?: string;
    /**
     * Picture url of the [User](#schema_user)
     */
    pictureUrl?: string;
    /**
     * User data
     */
    data?: {
        [k: string]: any;
    };
    /**
     * Id of the [User](#schema_user)
     */
    id: string;
    /**
     * Creation date of the [User](#schema_user) in ISO 8601 format
     */
    createdAt: string;
    /**
     * Updating date of the [User](#schema_user) in ISO 8601 format
     */
    updatedAt: string;
}
export interface Conversation {
    /**
     * Id of the [Conversation](#schema_conversation)
     */
    id: string;
    /**
     * Creation date of the [Conversation](#schema_conversation) in ISO 8601 format
     */
    createdAt: string;
    /**
     * Updating date of the [Conversation](#schema_conversation) in ISO 8601 format
     */
    updatedAt: string;
}
/**
 * The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).
 */
export interface Message {
    /**
     * Id of the [Message](#schema_message)
     */
    id: string;
    /**
     * Creation date of the [Message](#schema_message) in ISO 8601 format
     */
    createdAt: string;
    /**
     * Payload is the content type of the message.
     */
    payload: {
        audioUrl: string;
        type: "audio";
        [k: string]: any;
    } | {
        title: string;
        subtitle?: string;
        imageUrl?: string;
        actions: {
            action: "postback" | "url" | "say";
            label: string;
            value: string;
            [k: string]: any;
        }[];
        type: "card";
        [k: string]: any;
    } | {
        items: {
            title: string;
            subtitle?: string;
            imageUrl?: string;
            actions: {
                action: "postback" | "url" | "say";
                label: string;
                value: string;
                [k: string]: any;
            }[];
            [k: string]: any;
        }[];
        type: "carousel";
        [k: string]: any;
    } | {
        text: string;
        options: {
            label: string;
            value: string;
            [k: string]: any;
        }[];
        type: "choice";
        disableFreeText?: boolean;
        [k: string]: any;
    } | {
        text: string;
        options: {
            label: string;
            value: string;
            [k: string]: any;
        }[];
        type: "dropdown";
        [k: string]: any;
    } | {
        fileUrl: string;
        title?: string;
        type: "file";
        [k: string]: any;
    } | {
        imageUrl: string;
        type: "image";
        [k: string]: any;
    } | {
        latitude: number;
        longitude: number;
        address?: string;
        title?: string;
        type: "location";
        [k: string]: any;
    } | {
        markdown: string;
        type: "markdown";
        [k: string]: any;
    } | {
        text: string;
        type: "text";
        [k: string]: any;
    } | {
        videoUrl: string;
        type: "video";
        [k: string]: any;
    } | {
        items: ({
            type: "text";
            payload: {
                text: string;
                [k: string]: any;
            };
            [k: string]: any;
        } | {
            type: "markdown";
            payload: {
                markdown: string;
                [k: string]: any;
            };
            [k: string]: any;
        } | {
            type: "image";
            payload: {
                imageUrl: string;
                [k: string]: any;
            };
            [k: string]: any;
        } | {
            type: "audio";
            payload: {
                audioUrl: string;
                [k: string]: any;
            };
            [k: string]: any;
        } | {
            type: "video";
            payload: {
                videoUrl: string;
                [k: string]: any;
            };
            [k: string]: any;
        } | {
            type: "file";
            payload: {
                fileUrl: string;
                title?: string;
                [k: string]: any;
            };
            [k: string]: any;
        } | {
            type: "location";
            payload: {
                latitude: number;
                longitude: number;
                address?: string;
                title?: string;
                [k: string]: any;
            };
            [k: string]: any;
        })[];
        type: "bloc";
        [k: string]: any;
    };
    /**
     * ID of the [User](#schema_user)
     */
    userId: string;
    /**
     * ID of the [Conversation](#schema_conversation)
     */
    conversationId: string;
}
export interface Event {
    /**
     * ID of the [Event](#schema_event).
     */
    id: string;
    /**
     * Creation date of the [Event](#schema_event) in ISO 8601 format
     */
    createdAt: string;
    /**
     * Payload is the content of the event.
     */
    payload: {
        type: "custom";
        data: {
            [k: string]: any;
        };
        [k: string]: any;
    } | {
        type: "conversation_started";
        data: {
            [k: string]: {
                [k: string]: any;
            };
        };
        [k: string]: any;
    };
    /**
     * ID of the [Conversation](#schema_conversation).
     */
    conversationId: string;
    /**
     * ID of the [User](#schema_user).
     */
    userId: string;
}
export interface File {
    id: string;
    botId: string;
    key: string;
    size: number | null;
    contentType: string;
    tags: {
        [k: string]: string;
    };
    createdAt: string;
    updatedAt: string;
    accessPolicies: ("integrations" | "public_content")[];
    index: boolean;
    url: string;
    status: "upload_pending" | "upload_failed" | "upload_completed" | "indexing_pending" | "indexing_failed" | "indexing_completed";
    failedStatusReason?: string;
    uploadUrl: string;
}
