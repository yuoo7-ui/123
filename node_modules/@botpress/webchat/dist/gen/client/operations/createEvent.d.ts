export interface CreateEventRequestHeaders {
    "x-user-key": string;
}
export interface CreateEventRequestQuery {
}
export interface CreateEventRequestParams {
}
export interface CreateEventRequestBody {
    /**
     * Payload is the content type of the event.
     */
    payload: {
        type: "custom";
        data: {
            [k: string]: any;
        };
        [k: string]: any;
    } | {
        type: "conversation_started";
        data: {
            [k: string]: {
                [k: string]: any;
            };
        };
        [k: string]: any;
    };
    /**
     * ID of the [Conversation](#schema_conversation)
     */
    conversationId: string;
}
export type CreateEventInput = CreateEventRequestBody & CreateEventRequestHeaders & CreateEventRequestQuery & CreateEventRequestParams;
export type CreateEventRequest = {
    headers: CreateEventRequestHeaders;
    query: CreateEventRequestQuery;
    params: CreateEventRequestParams;
    body: CreateEventRequestBody;
};
export declare const parseReq: (input: CreateEventInput) => CreateEventRequest & {
    path: string;
};
export interface CreateEventResponse {
    event: {
        /**
         * ID of the [Event](#schema_event).
         */
        id: string;
        /**
         * Creation date of the [Event](#schema_event) in ISO 8601 format
         */
        createdAt: string;
        /**
         * Payload is the content of the event.
         */
        payload: {
            type: "custom";
            data: {
                [k: string]: any;
            };
            [k: string]: any;
        } | {
            type: "conversation_started";
            data: {
                [k: string]: {
                    [k: string]: any;
                };
            };
            [k: string]: any;
        };
        /**
         * ID of the [Conversation](#schema_conversation).
         */
        conversationId: string;
        /**
         * ID of the [User](#schema_user).
         */
        userId: string;
    };
}
