export interface GetEventRequestHeaders {
    "x-user-key": string;
}
export interface GetEventRequestQuery {
}
export interface GetEventRequestParams {
    id: string;
}
export interface GetEventRequestBody {
}
export type GetEventInput = GetEventRequestBody & GetEventRequestHeaders & GetEventRequestQuery & GetEventRequestParams;
export type GetEventRequest = {
    headers: GetEventRequestHeaders;
    query: GetEventRequestQuery;
    params: GetEventRequestParams;
    body: GetEventRequestBody;
};
export declare const parseReq: (input: GetEventInput) => GetEventRequest & {
    path: string;
};
export interface GetEventResponse {
    event: {
        /**
         * ID of the [Event](#schema_event).
         */
        id: string;
        /**
         * Creation date of the [Event](#schema_event) in ISO 8601 format
         */
        createdAt: string;
        /**
         * Payload is the content of the event.
         */
        payload: {
            type: "custom";
            data: {
                [k: string]: any;
            };
            [k: string]: any;
        } | {
            type: "conversation_started";
            data: {
                [k: string]: {
                    [k: string]: any;
                };
            };
            [k: string]: any;
        };
        /**
         * ID of the [Conversation](#schema_conversation).
         */
        conversationId: string;
        /**
         * ID of the [User](#schema_user).
         */
        userId: string;
    };
}
