type CallbackFn<T> = (args: T) => void;
export declare class EventEmitter<T extends Record<string, any>> {
    private readonly eventMap;
    constructor();
    on<U extends keyof T>(event: U, callback: CallbackFn<T[U]>): () => void;
    emit<U extends keyof T>(event: U, arg?: T[U]): void;
}
export type Events = {
    [key: string]: undefined;
};
export declare const eventEmitter: EventEmitter<Events>;
export {};
