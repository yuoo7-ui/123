import * as types from './typings';
export type AudioMessage = {
    type: 'audio';
    url: string;
};
export type BubbleMessage = {
    type: 'bubble';
    block: Message;
};
export type ButtonMessage = {
    type: 'button';
    variant: 'action' | 'link';
    reusable?: boolean;
    groupId?: string;
    text: string;
    buttonValue: string;
};
export type CarouselMessage = {
    type: 'carousel';
    blocks: Message[];
};
export type ColumnMessage = {
    type: 'column';
    blocks: Message[];
    horizontalAlignment?: 'left' | 'center' | 'right';
    verticalAlignment?: 'top' | 'center' | 'bottom' | 'stretch';
};
export type DropdownMessage = {
    label?: string;
    type: 'dropdown';
    reusable?: boolean;
    options: {
        label: string;
        value: string;
    }[];
};
export type FileMessage = {
    type: 'file';
    url: string;
    title?: string;
};
export type ImageMessage = {
    type: 'image';
    orientation?: 'portrait' | 'landscape' | 'square' | 'auto';
    url: string;
};
export type LocationMessage = {
    type: 'location';
    latitude: number;
    longitude: number;
    title?: string;
};
export type RowMessage = {
    type: 'row';
    blocks: Message[];
    horizontalAlignment?: 'left' | 'center' | 'right' | 'stretch';
    verticalAlignment?: 'top' | 'center' | 'bottom';
};
export type TextMessage = {
    type: 'text';
    text: string;
    value?: string;
};
export type VideoMessage = {
    type: 'video';
    url: string;
};
export type Message = AudioMessage | BubbleMessage | ButtonMessage | CarouselMessage | ColumnMessage | DropdownMessage | FileMessage | ImageMessage | LocationMessage | RowMessage | TextMessage | VideoMessage;
export type BubbleOf<T extends Message> = Omit<BubbleMessage, 'block'> & {
    block: T;
};
export type ColumnOf<T extends Message> = Omit<ColumnMessage, 'blocks'> & {
    blocks: T[];
};
export type RowOf<T extends Message> = Omit<RowMessage, 'blocks'> & {
    blocks: T[];
};
export type Messages = types.ByType<Message>;
