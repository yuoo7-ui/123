import { BlockObject } from '../types/block-type';
import { UserProps } from '../types';
import type { Message as WebchatMessage } from '../adapters/webchat';
type SafeOmit<T, K extends keyof T> = Omit<T, K>;
export type UserCredentials = {
    userId: string;
    userToken: string;
};
export type User = UserProps;
export type UserData = User['data'];
export type UserOptions = SafeOmit<User, 'data'>;
export type Message = {
    id: string;
    conversationId: string;
    authorId: string | undefined;
    sentOn: Date;
    disableInput?: boolean;
    payload: BlockObject;
    metadata?: Record<string, any>;
};
export type WebchatEvents = {
    conversation: string | undefined;
    message: Message;
    messageSent: WebchatMessage;
    error: Error;
    webchatVisibility: 'show' | 'hide' | 'toggle';
    webchatConfig: Record<string, any>;
    customEvent: Record<string, any>;
    isTyping: {
        isTyping: boolean;
        timeout: number;
    };
};
type ValueOf<T> = T[keyof T];
type AnyEvent = ValueOf<{
    [K in keyof WebchatEvents]: {
        type: K;
        payload: WebchatEvents[K];
    };
}>;
export type Events = WebchatEvents & {
    '*': AnyEvent;
};
export {};
