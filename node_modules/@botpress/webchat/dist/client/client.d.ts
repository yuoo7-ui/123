import { EventEmitter } from '../utils';
import { Events, UserCredentials, UserData, UserOptions, type Message, type User } from './types';
import { type FileType } from '../types';
import type { Message as WebchatMessage } from '../adapters/webchat';
export type PushpinClientProps = {
    apiUrl: string;
    clientId: string;
};
export declare class WebchatClient extends EventEmitter<Events> {
    private _client;
    private _webhookId;
    private _apiUrl;
    private _state;
    constructor(props: PushpinClientProps);
    readonly mode = "pushpin";
    get apiUrl(): string;
    get clientId(): string;
    get userId(): string | undefined;
    getUser(): Promise<{
        data: {
            [k: string]: any;
        } | undefined;
    }>;
    updateUser(user: User): Promise<User>;
    get conversationId(): string | undefined;
    connect(creds?: UserCredentials, data?: UserData, opts?: UserOptions): Promise<UserCredentials | undefined>;
    private _initialConnect;
    private _reConnect;
    disconnect(): Promise<void>;
    sendFile(file: File): Promise<{
        fileUrl: string;
        name: string;
        type: FileType;
    }>;
    sendMessage(payload: WebchatMessage): Promise<void>;
    sendEvent(event: Record<string, any>): Promise<void>;
    switchConversation(id: string): Promise<void>;
    conversationExists(id: string): Promise<boolean>;
    userExists({ userToken }: UserCredentials): Promise<boolean>;
    newConversation(): Promise<void>;
    private _createNewConversation;
    listMessages(): Promise<Message[]>;
    private _connectConversation;
    private _mapMessage;
}
