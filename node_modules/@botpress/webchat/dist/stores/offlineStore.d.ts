import { UserCredentials } from '../client';
type OfflineStore = {
    messageHistory: {
        [key: string]: string[];
    };
    user?: UserCredentials;
    conversationId?: string;
    clientMode: string;
    addMessageToHistory: (props: {
        userId: string;
        message: string;
    }) => void;
    setClientMode: (clientMode: string) => void;
    setUser: (userId?: UserCredentials) => void;
    setConversationId: (conversationId?: string) => void;
    clearAll: () => void;
};
export declare const useOfflineStore: import("zustand").UseBoundStore<Omit<Omit<import("zustand").StoreApi<OfflineStore>, "setState"> & {
    setState<A extends string | {
        type: string;
    }>(partial: OfflineStore | Partial<OfflineStore> | ((state: OfflineStore) => OfflineStore | Partial<OfflineStore>), replace?: boolean | undefined, action?: A | undefined): void;
}, "persist"> & {
    persist: {
        setOptions: (options: Partial<import("zustand/middleware").PersistOptions<OfflineStore, OfflineStore>>) => void;
        clearStorage: () => void;
        rehydrate: () => Promise<void> | void;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: OfflineStore) => void) => () => void;
        onFinishHydration: (fn: (state: OfflineStore) => void) => () => void;
        getOptions: () => Partial<import("zustand/middleware").PersistOptions<OfflineStore, OfflineStore>>;
    };
}>;
export {};
