import { type RefObject } from 'react';
import type { Configuration, MessageObject } from '../types';
import type { Renderers } from '../contexts';
import type { WebchatClient } from '../client';
import { type EventEmitter, type Events } from '../utils';
export type WebchatProps = {
    renderers: Partial<Renderers>;
    client?: WebchatClient;
    configuration: Configuration;
    messages: Record<string, MessageObject[]>;
    connected: boolean;
    disableComposer: boolean;
    isReadOnly: boolean;
    isTyping: boolean;
    lastTypingHeartbeat: Date | null;
    allowFileUpload: boolean;
    userData: Record<string, unknown>;
    userName?: string;
    userPictureUrl?: string;
    messageContainerRef: RefObject<HTMLDivElement>;
    closeWindow?: () => void | undefined;
    /**
     * The conversation ID to use when loading the chat.
     * If not found, a new conversation will be started.
     */
    conversationId?: string;
    disableRestartConversation?: boolean;
};
export type WebchatState = WebchatProps & {
    headerMessage?: React.ReactNode;
    setHeaderMessage: (headerMessage: React.ReactNode) => void;
    setState: (newState: Partial<WebchatState>) => void;
    setMessages: (messages: MessageObject[]) => void;
    addMessage: (message: Omit<MessageObject, 'id'> & {
        id?: string;
    }) => void;
    getMessages: () => MessageObject[];
    sendTextMessage: (message: string, value?: string) => void;
    sendMessage: WebchatClient['sendMessage'];
    sendFile: WebchatClient['sendFile'];
    on: WebchatClient['on'];
    setConnected: (connected: boolean) => void;
    setIsTyping: (isTyping: boolean, timeout?: number) => void;
    setLastTypingHeartbeat: (lastTypingHeartbeat: Date) => void;
    restartConversation: () => void;
    setDisableComposer: (disableComposer: boolean) => void;
    getClientId: () => string | undefined;
    eventEmitter: EventEmitter<Events>;
};
export type WebchatStore = ReturnType<typeof useCreateWebchatStore>;
export declare const WebchatContext: import("react").Context<(Omit<import("zustand").StoreApi<WebchatState>, "setState"> & {
    setState<A extends string | {
        type: string;
    }>(partial: WebchatState | Partial<WebchatState> | ((state: WebchatState) => WebchatState | Partial<WebchatState>), replace?: boolean | undefined, action?: A | undefined): void;
}) | null>;
export declare const useCreateWebchatStore: (initProps?: Partial<WebchatProps>) => Omit<import("zustand").StoreApi<WebchatState>, "setState"> & {
    setState<A extends string | {
        type: string;
    }>(partial: WebchatState | Partial<WebchatState> | ((state: WebchatState) => WebchatState | Partial<WebchatState>), replace?: boolean | undefined, action?: A | undefined): void;
};
