import EventSource from 'event-source-polyfill';
import { EventEmitter } from './event-emitter';
type OnOpen = NonNullable<EventSource.EventSourcePolyfill['onopen']>;
type OnMessage = NonNullable<EventSource.EventSourcePolyfill['onmessage']>;
type OnError = NonNullable<EventSource.EventSourcePolyfill['onerror']>;
export type OpenEvent = Parameters<OnOpen>[0];
export type MessageEvent = Parameters<OnMessage>[0];
export type ErrorEvent = Parameters<OnError>[0];
export type Events = {
    open: OpenEvent;
    message: MessageEvent;
    error: ErrorEvent;
};
export type Props = {
    headers?: Record<string, string>;
    timeout?: number;
};
export type EvSource = {
    on: EventEmitter<Events>['on'];
    close: () => void;
};
export declare const listenEventSource: (url: string, props?: Props) => Promise<EvSource>;
export {};
