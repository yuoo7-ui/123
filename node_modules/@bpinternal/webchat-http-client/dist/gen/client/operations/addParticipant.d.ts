export interface AddParticipantRequestHeaders {
    "x-user-key": string;
}
export interface AddParticipantRequestQuery {
}
export interface AddParticipantRequestParams {
    id: string;
}
export interface AddParticipantRequestBody {
    /**
     * User id
     */
    userId: string;
}
export type AddParticipantInput = AddParticipantRequestBody & AddParticipantRequestHeaders & AddParticipantRequestQuery & AddParticipantRequestParams;
export type AddParticipantRequest = {
    headers: AddParticipantRequestHeaders;
    query: AddParticipantRequestQuery;
    params: AddParticipantRequestParams;
    body: AddParticipantRequestBody;
};
export declare const parseReq: (input: AddParticipantInput) => AddParticipantRequest & {
    path: string;
};
export interface AddParticipantResponse {
    /**
     * The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.
     */
    participant: {
        /**
         * Name of the [User](#schema_user)
         */
        name?: string;
        /**
         * Picture url of the [User](#schema_user)
         */
        pictureUrl?: string;
        /**
         * User data
         */
        data?: {
            [k: string]: any;
        };
        /**
         * Id of the [User](#schema_user)
         */
        id: string;
        /**
         * Creation date of the [User](#schema_user) in ISO 8601 format
         */
        createdAt: string;
        /**
         * Updating date of the [User](#schema_user) in ISO 8601 format
         */
        updatedAt: string;
    };
}
