import { AxiosInstance } from 'axios';
import { toAxiosRequest } from './to-axios';
import * as getConversation from './operations/getConversation';
import * as createConversation from './operations/createConversation';
import * as deleteConversation from './operations/deleteConversation';
import * as listConversations from './operations/listConversations';
import * as listenConversation from './operations/listenConversation';
import * as listConversationMessages from './operations/listConversationMessages';
import * as addParticipant from './operations/addParticipant';
import * as removeParticipant from './operations/removeParticipant';
import * as getParticipant from './operations/getParticipant';
import * as listParticipants from './operations/listParticipants';
import * as getMessage from './operations/getMessage';
import * as createMessage from './operations/createMessage';
import * as deleteMessage from './operations/deleteMessage';
import * as getUser from './operations/getUser';
import * as createUser from './operations/createUser';
import * as updateUser from './operations/updateUser';
import * as deleteUser from './operations/deleteUser';
import * as getEvent from './operations/getEvent';
import * as createEvent from './operations/createEvent';
import * as createFile from './operations/createFile';
export * from './models';
export * as getConversation from './operations/getConversation';
export * as createConversation from './operations/createConversation';
export * as deleteConversation from './operations/deleteConversation';
export * as listConversations from './operations/listConversations';
export * as listenConversation from './operations/listenConversation';
export * as listConversationMessages from './operations/listConversationMessages';
export * as addParticipant from './operations/addParticipant';
export * as removeParticipant from './operations/removeParticipant';
export * as getParticipant from './operations/getParticipant';
export * as listParticipants from './operations/listParticipants';
export * as getMessage from './operations/getMessage';
export * as createMessage from './operations/createMessage';
export * as deleteMessage from './operations/deleteMessage';
export * as getUser from './operations/getUser';
export * as createUser from './operations/createUser';
export * as updateUser from './operations/updateUser';
export * as deleteUser from './operations/deleteUser';
export * as getEvent from './operations/getEvent';
export * as createEvent from './operations/createEvent';
export * as createFile from './operations/createFile';
export type ClientProps = {
    toAxiosRequest: typeof toAxiosRequest;
};
export declare class Client {
    private axiosInstance;
    private props;
    constructor(axiosInstance: AxiosInstance, props?: Partial<ClientProps>);
    readonly getConversation: (input: getConversation.GetConversationInput) => Promise<getConversation.GetConversationResponse>;
    readonly createConversation: (input: createConversation.CreateConversationInput) => Promise<createConversation.CreateConversationResponse>;
    readonly deleteConversation: (input: deleteConversation.DeleteConversationInput) => Promise<deleteConversation.DeleteConversationResponse>;
    readonly listConversations: (input: listConversations.ListConversationsInput) => Promise<listConversations.ListConversationsResponse>;
    readonly listenConversation: (input: listenConversation.ListenConversationInput) => Promise<listenConversation.ListenConversationResponse>;
    readonly listConversationMessages: (input: listConversationMessages.ListConversationMessagesInput) => Promise<listConversationMessages.ListConversationMessagesResponse>;
    readonly addParticipant: (input: addParticipant.AddParticipantInput) => Promise<addParticipant.AddParticipantResponse>;
    readonly removeParticipant: (input: removeParticipant.RemoveParticipantInput) => Promise<removeParticipant.RemoveParticipantResponse>;
    readonly getParticipant: (input: getParticipant.GetParticipantInput) => Promise<getParticipant.GetParticipantResponse>;
    readonly listParticipants: (input: listParticipants.ListParticipantsInput) => Promise<listParticipants.ListParticipantsResponse>;
    readonly getMessage: (input: getMessage.GetMessageInput) => Promise<getMessage.GetMessageResponse>;
    readonly createMessage: (input: createMessage.CreateMessageInput) => Promise<createMessage.CreateMessageResponse>;
    readonly deleteMessage: (input: deleteMessage.DeleteMessageInput) => Promise<deleteMessage.DeleteMessageResponse>;
    readonly getUser: (input: getUser.GetUserInput) => Promise<getUser.GetUserResponse>;
    readonly createUser: (input: createUser.CreateUserInput) => Promise<createUser.CreateUserResponse>;
    readonly updateUser: (input: updateUser.UpdateUserInput) => Promise<updateUser.UpdateUserResponse>;
    readonly deleteUser: (input: deleteUser.DeleteUserInput) => Promise<deleteUser.DeleteUserResponse>;
    readonly getEvent: (input: getEvent.GetEventInput) => Promise<getEvent.GetEventResponse>;
    readonly createEvent: (input: createEvent.CreateEventInput) => Promise<createEvent.CreateEventResponse>;
    readonly createFile: (input: createFile.CreateFileInput) => Promise<createFile.CreateFileResponse>;
}
